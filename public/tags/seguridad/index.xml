<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Pabpereza - DevSecOps – seguridad</title><link>/tags/seguridad/</link><description>Recent content in seguridad on Pabpereza - DevSecOps</description><generator>Hugo -- gohugo.io</generator><lastBuildDate>Mon, 29 Aug 2022 00:00:00 +0000</lastBuildDate><atom:link href="/tags/seguridad/index.xml" rel="self" type="application/rss+xml"/><item><title>Docs: Escáneres de vulnerabilidades</title><link>/docs/contenedores/docker/analizar_contenedores/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/contenedores/docker/analizar_contenedores/</guid><description>
&lt;h2 id="introducción">Introducción&lt;/h2>
&lt;p>Los contenedores nos han permitido la facilidad y comodidad de empaquetar nuestras aplicaciones y servicios, y también nos permiten asegurar que se ejecuten de forma segura. Sin embargo, las imágenes se contruyen con muchos componentes de terceros sobre los que no tenemos visibilidad. Para esta labor tenemos diferentes herramientas que nos ayudan a analizar la seguridad de nuestros contenedores.&lt;/p>
&lt;h2 id="herramientas">Herramientas&lt;/h2>
&lt;h3 id="snyk---docker-desktop">Snyk - Docker Desktop&lt;/h3>
&lt;p>Es sin duda una de las más desconocidas debido a su reciente implementación en la plataforma de Docker pero, dada su integración nativa y que no es necesario realizar instalaciones adicionales, es una herramienta más que adecuada.&lt;/p>
&lt;p>Tiene unas limitaciones de uso mensual pero podemos iniciar sesión con una cuenta gratuita para ampliarlo. &lt;a href="https://snyk.io/">Snyk&lt;/a>.&lt;/p>
&lt;p>Podemos utilizar esta herramienta simplemente escribiendo:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>docker scan &amp;lt;imagen&amp;gt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Otra forma de utilizarla, es con el parámetro &amp;ldquo;&amp;ndash;dependency-tree&amp;rdquo;, el cuál muestra todo el árbol
de dependencias de la images.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>docker scan --dependency-tree &amp;lt;imagen&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ├─ ca-certificates @ 20200601~deb10u1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> │ └─ openssl @ 1.1.1d-0+deb10u3
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> │ └─ openssl/libssl1.1 @ 1.1.1d-0+deb10u3
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ├─ curl @ 7.64.0-4+deb10u1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> │ └─ curl/libcurl4 @ 7.64.0-4+deb10u1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> │ ├─ e2fsprogs/libcom-err2 @ 1.44.5-1+deb10u3
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> │ ├─ krb5/libgssapi-krb5-2 @ 1.17-3
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> │ │ ├─ e2fsprogs/libcom-err2 @ 1.44.5-1+deb10u3
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> │ │ ├─ krb5/libk5crypto3 @ 1.17-3
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> │ │ │ └─ krb5/libkrb5support0 @ 1.17-3
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> │ │ ├─ krb5/libkrb5-3 @ 1.17-3
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> │ │ │ ├─ e2fsprogs/libcom-err2 @ 1.44.5-1+deb10u3
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> │ │ │ ├─ krb5/libk5crypto3 @ 1.17-3
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> │ │ │ ├─ krb5/libkrb5support0 @ 1.17-3
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> │ │ │ └─ openssl/libssl1.1 @ 1.1.1d-0+deb10u3
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> │ │ └─ krb5/libkrb5support0 @ 1.17-3
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> │ ├─ libidn2/libidn2-0 @ 2.0.5-1+deb10u1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> │ │ └─ libunistring/libunistring2 @ 0.9.10-1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> │ ├─ krb5/libk5crypto3 @ 1.17-3
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> │ ├─ krb5/libkrb5-3 @ 1.17-3
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> │ ├─ openldap/libldap-2.4-2 @ 2.4.47+dfsg-3+deb10u2
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> │ │ ├─ gnutls28/libgnutls30 @ 3.6.7-4+deb10u4
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> │ │ │ ├─ nettle/libhogweed4 @ 3.4.1-1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> │ │ │ │ └─ nettle/libnettle6 @ 3.4.1-1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> │ │ │ ├─ libidn2/libidn2-0 @ 2.0.5-1+deb10u1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> │ │ │ ├─ nettle/libnettle6 @ 3.4.1-1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> │ │ │ ├─ p11-kit/libp11-kit0 @ 0.23.15-2
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> │ │ │ │ └─ libffi/libffi6 @ 3.2.1-9
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> │ │ │ ├─ libtasn1-6 @ 4.13-3
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> │ │ │ └─ libunistring/libunistring2 @ 0.9.10-1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> │ │ ├─ cyrus-sasl2/libsasl2-2 @ 2.1.27+dfsg-1+deb10u1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> │ │ │ └─ cyrus-sasl2/libsasl2-modules-db @ 2.1.27+dfsg-1+deb10u1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> │ │ │ └─ db5.3/libdb5.3 @ 5.3.28+dfsg1-0.5
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> │ │ └─ openldap/libldap-common @ 2.4.47+dfsg-3+deb10u2
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> │ ├─ nghttp2/libnghttp2-14 @ 1.36.0-2+deb10u1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> │ ├─ libpsl/libpsl5 @ 0.20.2-2
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> │ │ ├─ libidn2/libidn2-0 @ 2.0.5-1+deb10u1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> │ │ └─ libunistring/libunistring2 @ 0.9.10-1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> │ ├─ rtmpdump/librtmp1 @ 2.4+20151223.gitfa8646d.1-2
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> │ │ ├─ gnutls28/libgnutls30 @ 3.6.7-4+deb10u4
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> │ │ ├─ nettle/libhogweed4 @ 3.4.1-1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> │ │ └─ nettle/libnettle6 @ 3.4.1-1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> │ ├─ libssh2/libssh2-1 @ 1.8.0-2.1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> │ │ └─ libgcrypt20 @ 1.8.4-5
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> │ └─ openssl/libssl1.1 @ 1.1.1d-0+deb10u3
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ├─ gnupg2/dirmngr @ 2.2.12-1+deb10u1
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Blog: Pentesting desde un contenedor</title><link>/blog/2022/08/29/pentesting-desde-un-contenedor/</link><pubDate>Mon, 29 Aug 2022 00:00:00 +0000</pubDate><guid>/blog/2022/08/29/pentesting-desde-un-contenedor/</guid><description>
&lt;img src="/blog/2022/08/29/pentesting-desde-un-contenedor/featured_pentesting_desde_un_contenedor_huf29348e0c4940b2367c48c76f9480cdb_792607_640x0_resize_catmullrom_3.png" width="640" height="360"/>
&lt;p>He hablado mucho de como hacer diversas acciones en docker y contenedores. Tampoco quiero que mi contenido sea monotemático pero
me han lanzando una sugerencia de vídeo y no me puedo resistir a abordar el tema.&lt;/p>
&lt;p>Concretamente, el usuario pwnhun73r me sugirió utilizar contenedores para pentesting en laboratorios como HackTheBox o TryHackMe. Gracias por el apoyo y la sugerencia. Tu también puedes sugerir nuevo contenido desde &lt;a href="https://github.com/pabpereza/pabpereza/issues">la sección de issues de esta página en GitHub&lt;/a>.&lt;/p>
&lt;p>Hace tiempo que no me dedico al pentesting profesionalmente pero tampoco me gusta que se me oxide el tema. Youtube es muy restrictivo con el contenido del hacking por lo que, para este vídeo, me limitaré a plantear el entorno sin entrar en la explotación.&lt;/p>
&lt;h2 id="por-qué">¿Por qué?&lt;/h2>
&lt;p>Esta es la pregunta del millón&amp;hellip; ¿Por qué?¿Cuál es la necesidad?. Realmente las máquinas virtuales para esta labor igual son más prácticas que un contenedor, tienes tus copias de seguridad, tu interfaz, puedes conectarles hardware cómodamente (antenas, cables, etc) y puedes configurar los servicios que necesites.&lt;/p>
&lt;p>Para los fanáticos de los contenedores como yo, es por amor de llevar la tecnología al límite. Hay que reconocer que los contenedores tienen sus ventajas. Fáciles de ejecutar, versionar y almacenar. Suficiente para justificar este vídeo.&lt;/p>
&lt;h2 id="retos">Retos&lt;/h2>
&lt;p>Tenemos dos retos a tener en cuenta basados en dos escenarios:&lt;/p>
&lt;h3 id="contenedor-para-pentesting-de-un-sitio-web-público">Contenedor para pentesting de un sitio web público&lt;/h3>
&lt;p>
&lt;div class="alert alert-warning" role="alert">
&lt;h4 class="alert-heading">Warning&lt;/h4>
Antes de nada recordad que el sitio deberá ser de vuestra propiedad o deberéis tener permiso para auditarlo.
&lt;/div>
En este supuesto, accedemos a algún sitio público y queremos hacer pentesting. Para la parte de la enumeración no tendremos limitación alguna. El problema surge cuando queremos explotar un sitio. La mayoría de conexiones que intentaremos generar serán inversas y, por tanto, necesitaremos abrir puertos en el router.&lt;/p>
&lt;figure class="card rounded p-2 td-post-card mb-4 mt-4" style="max-width: 333px">
&lt;img class="card-img-top" src="/blog/2022/08/29/pentesting-desde-un-contenedor/web_container.drawio_huac816293542598ce85666786b3ed362d_17866_700x450_fit_catmullrom_3.png" width="323" height="450">
&lt;figcaption class="card-body px-0 pt-2 pb-0">
&lt;p class="card-text">
Conexiones desde un contenedor a un servidor público
&lt;/p>
&lt;/figcaption>
&lt;/figure>
&lt;p>Supongamos que hacemos las pruebas desde un servidor público también, como un VPS. En este caso, no tendremos problema para abrir puertos. Aunque no todo queda ahí, tendremos que natear al contenedor un rango de puertos para que el servidor pueda acceder a los servicios que estemos ejecutando en el contenedor.&lt;/p>
&lt;p>Imaginaros que estamos escuchando una conexión con netcat en el puerto 4444. Deberíamos ejecutar el contenedor con ese puerto mapeado del host para que podamos capturar las conexiones desde del contenedor.&lt;/p>
&lt;p>Esto podemos hacerlo así:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>docker run -it -p 4444:4444 kalilinux/kali-rolling /bin/bash
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="contenedor-para-pentesting-en-un-laboratorio-privado">Contenedor para pentesting en un laboratorio privado&lt;/h3>
&lt;p>En este caso, la parte de acceso y enrutamiento es más sencillo dado que normalmente a los laboratorios de pentesting nos conectamos a través de una VPN, la cuál, nos crea un tunel directamente desde el contenedor al laboratorio.
&lt;figure class="card rounded p-2 td-post-card mb-4 mt-4" style="max-width: 288px">
&lt;img class="card-img-top" src="/blog/2022/08/29/pentesting-desde-un-contenedor/lab_container.drawio_huec361dd4430ba791d15e41eba0cc9af1_27417_700x450_fit_catmullrom_3.png" width="278" height="450">
&lt;figcaption class="card-body px-0 pt-2 pb-0">
&lt;p class="card-text">
Conexiones desde un contenedor a un laboratorio privado
&lt;/p>
&lt;/figcaption>
&lt;/figure>
&lt;/p>
&lt;p>La problemática viene por la parte del cliente VPN en los contenedores.&lt;/p>
&lt;h4 id="limitaciones">Limitaciones&lt;/h4>
&lt;p>La principal limitación es la acceso a las interfaces de red. En una máquina virtual virtualizas tanto software como hardware. En el caso de los contenedores, al ser procesos aislados, tenemos que lidiar con la problemática de crear interfaces de red para las VPN de algunos laboratorio.&lt;/p>
&lt;p>Podemos levantar un contenedor con Kali Linux solventando estas limitaciones, usando el parámetro &lt;code>--privileged&lt;/code> para que el contenedor tenga acceso a las interfaces de red del host y &lt;code>--sysctl net.ipv6.conf.all.disable_ipv6=0&lt;/code> para que el contenedor tenga acceso a la red IPv6.&lt;/p>
&lt;p>El comando completo sería:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>docker run -it --privileged --sysctl net.ipv6.conf.all.disable_ipv6&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span> kalilinux/kali-rolling /bin/bash
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Así ya podríamos conectarnos a HackTheBox, por ejemplo.&lt;/p>
&lt;h2 id="vídeo">Vídeo&lt;/h2>
&lt;p>Sin más preámbulos, dentro vídeo:
&lt;div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
&lt;iframe src="https://www.youtube.com/embed/0GsiBPVRMyI" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" allowfullscreen title="YouTube Video">&lt;/iframe>
&lt;/div>
&lt;/p></description></item><item><title>Blog: Kali en Docker recopilación</title><link>/blog/2021/11/01/kali-en-docker-recopilaci%C3%B3n/</link><pubDate>Mon, 01 Nov 2021 00:00:00 +0000</pubDate><guid>/blog/2021/11/01/kali-en-docker-recopilaci%C3%B3n/</guid><description>
&lt;img src="/blog/2021/11/01/kali-en-docker-recopilaci%C3%B3n/featured_kali_en_docker_hua84c0b00509a932ac755fccfda475c2b_509673_640x0_resize_catmullrom_3.png" width="640" height="307"/>
&lt;p>Unas semanas antes de la creación de esta web había hecho una trilogía de vídeos hablando de como utilizar el sistema operativo Kalilinux en Docker. Por dejarlos aquí archivados de alguna manera y dejar la documentación por escrito he optado por escribir esta entrada.&lt;/p>
&lt;h1 id="ventajas-y-desventajas-de-utilizar-kalilinux-en-docker">Ventajas y desventajas de utilizar Kalilinux en Docker&lt;/h1>
&lt;p>Bueno, yo creo que si conoces la tecnología docker la respuesta es simple. Puedes tener imágenes ligeras, con las herramientas que necesitas, preparadas para ejecutar muy rápidamente. Tambien puedes gestionarlas con un repositorio remoto y transportarlas fácilmente entre distintos entornos.&lt;/p>
&lt;p>Pero como todo, tiene sus grandes inconvenientes. Las imágenes de docker no tienen acceso directo al hardware y eso puede lastrar un poco el rendimiento, concretamente si necesitamos la tarjeta gráfica en operaciones de computación como el cracking de contraseñas.&lt;/p>
&lt;p>En la &lt;a href="https://www.kali.org/get-kali/">propia página&lt;/a> de Kali se puede ver la comparativa completa con todas sus opciones:&lt;/p>
&lt;figure class="card rounded p-2 td-post-card mb-4 mt-4" style="max-width: 710px">
&lt;img class="card-img-top" src="/blog/2021/11/01/kali-en-docker-recopilaci%C3%B3n/featured_kali_en_docker_hua84c0b00509a932ac755fccfda475c2b_509673_700x450_fit_catmullrom_3.png" width="700" height="336">
&lt;figcaption class="card-body px-0 pt-2 pb-0">
&lt;p class="card-text">
Comparativa de las distintas opciones de Kalilinux.
&lt;/p>
&lt;/figcaption>
&lt;/figure>
&lt;h1 id="vídeos-explicativos">Vídeos explicativos&lt;/h1>
&lt;div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
&lt;iframe src="https://www.youtube.com/embed/yvfXt7Ndrvc" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" allowfullscreen title="YouTube Video">&lt;/iframe>
&lt;/div>
&lt;div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
&lt;iframe src="https://www.youtube.com/embed/qnsi1cnTK3A" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" allowfullscreen title="YouTube Video">&lt;/iframe>
&lt;/div>
&lt;div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
&lt;iframe src="https://www.youtube.com/embed/sVJ4iocUods" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" allowfullscreen title="YouTube Video">&lt;/iframe>
&lt;/div></description></item><item><title>Blog: Analizar la seguridad de las imágenes de Docker</title><link>/blog/2021/09/19/analizar-la-seguridad-de-las-im%C3%A1genes-de-docker/</link><pubDate>Sun, 19 Sep 2021 00:00:00 +0000</pubDate><guid>/blog/2021/09/19/analizar-la-seguridad-de-las-im%C3%A1genes-de-docker/</guid><description>
&lt;img src="/blog/2021/09/19/analizar-la-seguridad-de-las-im%C3%A1genes-de-docker/featured_docker_escaner_vulnerabilidades_hu0e8237203507294e5d179ebaebf784e1_777481_640x0_resize_q75_catmullrom.jpg" width="640" height="360"/>
&lt;p>En anteriores vídeos he hablado acerca de la seguridad a la hora de crear imágenes pero hay un aspecto más crítico y fundamental que se suele obviar al construir imágenes. Estas, contienen software en forma de librerías del sistema que también pueden ser vulnerables. Pero, ¿como podemos revisar esa seguridad?&lt;/p>
&lt;div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
&lt;iframe src="https://www.youtube.com/embed/XmGEMOgI9-g" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" allowfullscreen title="YouTube Video">&lt;/iframe>
&lt;/div>
&lt;h2 id="qué-riesgos-de-seguridad-hay-en-las-imágenes-de-docker">¿Qué riesgos de seguridad hay en las imágenes de Docker?&lt;/h2>
&lt;p>Cuando construimos imágenes de Docker siempre partimos de una imagen base, que es la que se usa para construir las imágenes que queremos. Esta imagen base puede ser una imagen de una distribución Linux, o de una imagen de una aplicación. Estas imágenes pueden contener código de una aplicación, librerías, paquetes, etc. Todo el código que se encuentre en estas imágenes puede ser vulnerable a ataques de seguridad.&lt;/p>
&lt;h2 id="que-herramientas-podemos-usar-para-analizar-la-seguridad-de-las-imágenes-de-docker">¿Que herramientas podemos usar para analizar la seguridad de las imágenes de Docker?&lt;/h2>
&lt;p>Existen multitud de herramientas que pueden ser útiles para analizar la seguridad de las imágenes de Docker. Las más destacadas son:&lt;/p>
&lt;ul>
&lt;li>Trivy&lt;/li>
&lt;li>Anchore&lt;/li>
&lt;li>Clair&lt;/li>
&lt;/ul>
&lt;p>Para este vídeo y evitar instalar nada, hemos utilizado el escáner que viene incorporado con Docker en las últimas versiones. Se puede ejecutar con el siguiente comando:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>docker scan &amp;lt;nombre de la imagen&amp;gt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Iré documentando el uso de diferentes herramientas de análisis de seguridad en la siguiente pagína de la documentación:
&lt;a href="/docs/contenedores/analizar_contenedores/">Escaneo de seguridad en contenedores&lt;/a>&lt;/p></description></item><item><title>Docs: Trivy</title><link>/docs/contenedores/seguridad/trivy/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/contenedores/seguridad/trivy/</guid><description>
&lt;p>Trivy es una herramienta de análisis de vulnerabilidades para contenedores y ficheros de imagen. Es una herramienta de código abierto desarrollada por Aqua Security.&lt;/p>
&lt;p>&lt;a href="https://github.com/aquasecurity/trivy">Repositorio oficial&lt;/a>&lt;/p>
&lt;h2 id="uso-simple">Uso simple&lt;/h2>
&lt;p>El uso simple de trivy nos permite analizar una imagen de docker y obtener un informe con las vulnerabilidades encontradas.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>trivy image &amp;lt;nombre_imagen&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>trivy i &amp;lt;nombre_imagen&amp;gt; &lt;span style="color:#75715e"># Versión corta&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Parámetros:&lt;/p>
&lt;ul>
&lt;li>&lt;code>--exit-code&lt;/code>: Devuelve un código de salida 1 si se encuentra alguna vulnerabilidad.&lt;/li>
&lt;li>&lt;code>--severity&lt;/code>: Filtro de severidad. Valores: &lt;code>UNKNOWN&lt;/code>, &lt;code>LOW&lt;/code>, &lt;code>MEDIUM&lt;/code>, &lt;code>HIGH&lt;/code>, &lt;code>CRITICAL&lt;/code>.&lt;/li>
&lt;li>&lt;code>--ignore-unfixed&lt;/code>: Ignora las vulnerabilidades no arregladas.&lt;/li>
&lt;li>&lt;code>--no-progress&lt;/code>: Desactiva la barra de progreso.&lt;/li>
&lt;li>&lt;code>-o &amp;lt;formato&amp;gt;&lt;/code>: Formato de salida. Valores: &lt;code>table&lt;/code>, &lt;code>json&lt;/code>, &lt;code>template&lt;/code>, &lt;code>template-file&lt;/code>.&lt;/li>
&lt;/ul>
&lt;h3 id="analizar-una-imagen-comprimida">Analizar una imagen comprimida&lt;/h3>
&lt;p>Trivy también puede analizar un comprimido con la imagen. Para ello, se debe utilizar el parámetro &lt;code>--input&lt;/code> y especificar el directorio.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>trivy image --input &amp;lt;directorio&amp;gt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="analizar-un-sistema-de-ficheros">Analizar un sistema de ficheros&lt;/h3>
&lt;p>Se puede analizar un sistema de ficheros, aunque trivy se limitará a buscar libreías de terceros (declaradas en ficheros &lt;code>package.json&lt;/code>, &lt;code>requirements.txt&lt;/code>, etc`):&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>trivy filesystem &amp;lt;directorio&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">``&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="analizar-un-contenedor-en-ejecución">Analizar un contenedor en ejecución&lt;/h3>
&lt;p>Trivy también puede analizar un contenedor en ejecución. Para ello, se debe utilizar el parámetro &lt;code>--input&lt;/code> y especificar el contenedor.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>trivy image --input &amp;lt;nombre_contenedor&amp;gt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="analizar-un-repositorio">Analizar un repositorio&lt;/h3>
&lt;p>Este comando permite un repositorio de git y analizar ficheros de IaC y de librerías de terceros.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>trivy repo &amp;lt;url_repositorio&amp;gt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="usos-concretos">Usos concretos&lt;/h2>
&lt;h3 id="entornos-de-cicd">Entornos de CI/CD&lt;/h3>
&lt;p>Trivy puede ser utilizado en entornos de CI/CD para comprobar la seguridad de las imágenes que se van a desplegar. Para ello, se puede utilizar el parámetro &lt;code>--exit-code&lt;/code> para que devuelva un código de salida 1 si se encuentra alguna vulnerabilidad.&lt;/p>
&lt;p>También podríamos utilizar el parámetro &lt;code>--severity&lt;/code> para filtrar las vulnerabilidades por severidad. Por ejemplo, si queremos que devuelva un código de salida 1 si se encuentra alguna vulnerabilidad de severidad alta o crítica, podríamos utilizar el siguiente comando:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>trivy image &amp;lt;nombre_imagen&amp;gt; --exit-code &lt;span style="color:#ae81ff">1&lt;/span> --severity HIGH,CRITICAL
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="ignorar-vulnerabilidades-sin-parchear">Ignorar vulnerabilidades sin parchear&lt;/h3>
&lt;p>Puede dar el caso de que una vulnerabilidad no tenga parche disponible. En este caso, trivy nos mostrará la vulnerabilidad como si estuviera sin parchear. Para ignorar estas vulnerabilidades, se puede utilizar el parámetro &lt;code>--ignore-unfixed&lt;/code>.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>trivy image &amp;lt;nombre_imagen&amp;gt; --ignore-unfixed
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="tipos-de-escaneos-en-imágenes">Tipos de escaneos en imágenes&lt;/h3>
&lt;p>Por defecto, trivy analiza las imágenes de docker y busca vulnerabilidades en las librerías de terceros. Sin embargo, también es posible analizar las imágenes de docker para buscar vulnerabilidades en los ficheros de IaC (Infrastructure as Code) y en los ficheros de configuración de la imagen. Para ello, se debe utilizar el parámetro &lt;code>--scan-type&lt;/code> y especificar el tipo de escaneo que queremos realizar. Los valores posibles son: &lt;code>os&lt;/code>, &lt;code>library&lt;/code>, &lt;code>package&lt;/code>, &lt;code>all&lt;/code>.&lt;/p>
&lt;p>Ejemplos:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>trivy image &amp;lt;nombre_imagen&amp;gt; --scan-type os &lt;span style="color:#75715e"># Solo packages de sistema operativo ignorando librerías de terceros&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>trivy image &amp;lt;nombre_imagen&amp;gt; --scan-type library &lt;span style="color:#75715e"># Solo librerías de terceros ignorando packages de sistema operativo&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>trivy image &amp;lt;nombre_imagen&amp;gt; --scan-type package &lt;span style="color:#75715e"># Solo packages de sistema operativo y librerías de terceros&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>trivy image &amp;lt;nombre_imagen&amp;gt; --scan-type all &lt;span style="color:#75715e"># Todos los tipos de escaneo&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="saltar-escaneo-de-secretos">Saltar escaneo de secretos&lt;/h3>
&lt;p>Por defecto, trivy también busca secretos en la imagen. Esta labor puede sumar mucho tiempo a nuestros procesos de CI y puede ser que en algunas ramas o situaciones queramos desactivarlo. Esto se podría hacer así:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>trivy image --scanners vuln &amp;lt;nombre_imagen&amp;gt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item></channel></rss>